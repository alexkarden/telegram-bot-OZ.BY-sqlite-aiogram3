import logging
import time

from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


from script import is_link_belongs_to_site
from database import add_new_product, add_user_db, get_product_from_id, check_price_product, delete_product_from_user
from keyboards import start_keyboard_inline, user_list_products_keyboard, user_info_product







router = Router()



@router.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n"
        f"\n"
        f"üîÖ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö:\n"
        f"oz.by\n"
        f"amd.by\n"
        f"mila.by\n"
        # f"sila.by\n"
        f"21vek.by\n"
        f"detmir.by\n"
        f"hobbygames.by\n"
        f"znaemigraem.by\n"
        f"\n"
        f"üîÖ –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.\n")
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await add_user_db(message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                      message.from_user.username)
    await message.answer(welcome_text, reply_markup=start_keyboard_inline, parse_mode=ParseMode.HTML)



@router.message(Command('menu'))
async def cmd_menu(message: Message):
    text = (
        f"<b>‚òëÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üîÖ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã - <i>—Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</i>\n\n"
        f"üîÖ –ü–æ–º–æ—â—å - <i>–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</i>\n\n"
        f"üîÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - <i>–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</i>")

    await message.answer(text=text, reply_markup=start_keyboard_inline, parse_mode=ParseMode.HTML)



@router.message()
async def all_message(message: Message):
    try:
        text = message.text
        result = is_link_belongs_to_site(text)
        if result and result[0]:
            current_time = int(time.time())
            await add_new_product(result[1], result[0], result[2],result[3],result[4],current_time,0,message.from_user.id)
            #print(result)

            texttg = (
                f"–¢–æ–≤–∞—Ä <i><b>'{result[0]}'</b></i> –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è."

            )
            await message.answer(texttg, parse_mode=ParseMode.HTML)
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É', parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É : {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É : {e}", parse_mode=ParseMode.HTML)





@router.callback_query()
async def callback_query(callback: CallbackQuery, state:FSMContext):
    data = callback.data
    if data == '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã':
        #await callback.answer()
        await callback.message.answer(
            f"üîÖ <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>", reply_markup= await user_list_products_keyboard(callback.message.chat.id), parse_mode=ParseMode.HTML)


    elif data.startswith('id_'):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        product_id = data.split('_')[1]
        product_info = await get_product_from_id(product_id)
        product_price = await check_price_product(product_id)
        photo = product_info[3]
        caption = (f'<b>–¢–æ–≤–∞—Ä:</b> <a href="{product_info[1]}">{product_info[2]}</a>\n'

                f'<b>–°—Ç–∞—Ç—É—Å:</b> {product_price[2]}\n\n'
                f'<b>–¶–µ–Ω–∞:</b> {product_price[3]} BYN\n\n')
        await callback.message.answer_photo(photo=photo, caption=caption, reply_markup= await user_info_product(product_id), parse_mode=ParseMode.HTML)


    elif data.startswith('delete_'):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        product_id = data.split('_')[1]
        await delete_product_from_user(callback.message.chat.id,product_id)
        await callback.message.answer(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω", reply_markup=start_keyboard_inline, parse_mode=ParseMode.HTML)

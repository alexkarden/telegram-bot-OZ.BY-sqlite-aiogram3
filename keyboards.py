from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.enums import ParseMode



from database import get_user_list_product, check_price_product

#-----------------------------------------------------------------------------------------------------------------------–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
start_keyboard_inline = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõç –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data='–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')],
    [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data='–ü–æ–º–æ—â—å'),InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ])

#-----------------------------------------------------------------------------------------------------------------------–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def user_list_products_keyboard(user_id):
    keyboard = []
    try:
        products = await get_user_list_product(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if not products:
            return InlineKeyboardMarkup(inline_keyboard=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤

        for product in products:
            title = product[2]


            price = await check_price_product(product[0])
            product_id = "id_"+str(product[0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º product_id –≤ —Å—Ç—Ä–æ–∫—É
            #print(product_id)
            if price[3] == None:
                circle = f" üî¥ "
            else:
                circle = f" üü¢ "
            text_keyboard = f"{price[3]} - {product[5]}{circle}{title}"
            button = InlineKeyboardButton(text=text_keyboard, callback_data=product_id)
            keyboard.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    except Exception as e:
        print(f"An error occurred: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardMarkup(inline_keyboard=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    keyboard.append([InlineKeyboardButton(text="‚òëÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



#-----------------------------------------------------------------------------------------------------------------------–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
async def user_info_product(product_id):
    user_delete_product_key = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üõç –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data='–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã'),InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_{product_id}")],[InlineKeyboardButton(text="‚òëÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]])
    return user_delete_product_key


#-----------------------------------------------------------------------------------------------------------------------–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
async def product_delete_yes(product_id):
    user_delete_product_key = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã'),InlineKeyboardButton(text="–î–∞", callback_data=f"deleteyes_{product_id}")],[InlineKeyboardButton(text="‚òëÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]])
    return user_delete_product_key
